* Haskell Reference
  Reference for basic Haskell concepts and tooling.

** Project Setup
   A small step by step setup for a simple beginner project. This can be accomplished by ~cabal init~, but for learning I recommend to do it manual a few times.

*** Directory Structure
    In your project folder (~example-setup~ in this repo):
    1. ~mkdir app~ - this folder will contain your applications main entry point.
    2. ~touch app/Main.hs~ - file for main entry point.
    3. ~mkdir src~ - the root folder for all other source code files in the project.
    4. ~touch src/Lib.hs~ - file containg our example code.

*** Cabal Setup
    For the simple project setup, we will use a basic cabal file. Name the file as the project folder, ~touch example-setup.cabal~, and check [[file:example-setup/example-setup.cabal][the example cabal file for reference]].

*** Source
    Open ~./app/Main.hs~ and check the [[file:example-setup/app/Main.hs][example Main.hs]].
    After the main-file is in place, you can now compile and run the application with:
    ~cabal run~

*** Create library source
    Open ~./app/Lib.hs~ and add some code. Check [[file:example-setup-lib/src/Lib.hs][Lib.hs]] for an example.

*** Call the library from the main app
    Add a call from ~Main.hs~ to the library. See [[file:example-setup-lib/app/Main.hs][Main.hs]] for an example.

*** Add library to the Cabal file
    For the library code to be compiled and added to the project, a stanza need to be added to the cabal file. Once one is added for the library code, the executable must be updated to include a dependency to the project. Check the updated [[file:example-setup-lib/example-setup.cabal][cabal-file]] for an example.

** Tooling
   The tooling setup aims towards a as short feedback loop as possible.

*** Installation
**** ghcup
     - [[https://www.haskell.org/ghcup/][Docs]]
     - ghcup tui

*** Build tooling
**** Cabal
     - [[https://cabal.readthedocs.io/en/3.6/][Docs]]
     - To start a new Haskell project in the current dir
       - ~cabal init --interactive~
       - ~cabal init~
     - To build and run
       - ~cabal run~

*** Development tooling
    Centered around Emacs.
**** ghcid
     - [[https://hackage.haskell.org/package/ghcid][Hackage package]]
     - Run ~cabal update && cabal install ghcid~ to install it
     - Run with ~ghcid~
     - Run with ~ghcid --allow-eval~ to enable evaluation of comments
       - onliners ~-- $> getName (Person "Roffe")~
       - or blocks with ~{- $> <$ -}~

**** ghci
     - Can use a .ghci file in the root dir

**** Prettifier
     - [[https://github.com/haskell/stylish-haskell][stylish-haskell]]
       - can be configured to work with [[https://haskell.github.io/haskell-mode/manual/latest/Editing-Haskell-Code.html#Editing-Haskell-Code][Emacs]]
**** Linting
     - [[https://hackage.haskell.org/package/hlint][HLint]]

**** Emacs
     - [[https://github.com/haskell/haskell-mode][Haskell-mode]]
       - [[https://haskell.github.io/haskell-mode/manual/latest/][Docs]]
     - Generate tags with [[https://github.com/MarcWeber/hasktags][hasktags]]
     - Load a file starts a REPL, ~C-c C-l~

** References
   - [[https://jkeuhlen.com/2019/10/19/Compile-Your-Comments-In-Ghcid.html][Compile your comments in ghcid]]
   - [[https://hackage.haskell.org/package/ghcid][ghcid]]
   - [[https://hackage.haskell.org/package/ghcid][Hackage: The Haskell Package Repository]]
